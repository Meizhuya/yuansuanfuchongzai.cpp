#include<iostream>
using namespace std;
//加号运算符重载

class Person
{
//public:
//	//1.成员函数重载+号
//	Person operator+(Person& p)
//	{
//		Person temp;
//		temp.m_A = this->m_A + m_A;
//		temp.m_B = this->m_B + m_B;
//		return temp;
//	
//	
//	}


public:
	int m_A;
	int m_B;
};
//2.全局函数重载+号
Person operator+(Person& p1, Person& p2)
{
	Person temp;
	temp.m_A = p1.m_A + p2.m_A;
	temp.m_B = p1.m_B + p2.m_B;
	return temp;
}

void test01()
{
	Person p1;
	p1.m_A = 10;
	p1.m_B = 10;
	Person p2;
	p2.m_A = 10;
	p2.m_B = 10;

	Person p3 = p1 + p2;
	cout << "p3.m_A=" << p3.m_A << endl;
	cout << "p3.m_B=" << p3.m_B << endl;
  
}
int main()
{

	test01();



	system("pause");
	return 0;

}



#include<iostream>
using namespace std;
//加号运算符重载

class Person
{
	//利用成员函数重载 左移运算符
//不能使用成员函数去实现左移重载运算符

public:
	int m_A;
	int m_B;
};

//只能利用全局函数去重载左移运算符
ostream& operator<<(ostream& cout, Person& p)//本质 operator<<(cout,p)
{
 
	cout << "m_A= "  << p.m_A << " m_B=" << p.m_B;
	return cout;
}
void test01()
{

	Person p;
	p.m_A = 10;
	p.m_B = 10;

	cout << p << endl;;
}
int main()
{
	test01();
	system("pause");
	return 0;

}
